class Solution {
    // Function to return list containing vertices in Topological order.
    static Stack<Integer> st = new Stack<>();
    static ArrayList<Integer> topologicalSort(ArrayList<ArrayList<Integer>> adj) {
        // Your code here
        
        HashSet<Integer> seen = new HashSet<>();
        
        int V = adj.size();
        
        for(int i=0;i<V;i++){
            if(!seen.contains(i)){
                dfs(i,seen,adj);
            }
        }
        
        ArrayList<Integer> al = new ArrayList<>();
        
        while(!st.isEmpty()){
            al.add(st.pop());
        }
        
        return al;
    }
    
    static void dfs(int node, HashSet<Integer> seen,ArrayList<ArrayList<Integer>> adj){
        seen.add(node);
        
        for(int nei:adj.get(node)){
            if(!seen.contains(nei)){
                dfs(nei,seen,adj);
            }
        }
        
        st.add(node);
    }
}
