/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> neighbors;
    public Node() {
        val = 0;
        neighbors = new ArrayList<Node>();
    }
    public Node(int _val) {
        val = _val;
        neighbors = new ArrayList<Node>();
    }
    public Node(int _val, ArrayList<Node> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
}
*/

class Solution {
    HashMap<Node,Node> hmap;
    public Node cloneGraph(Node node) {
        hmap = new HashMap<>();

        if(node==null){
            return null;
        }

        dfs(node,new HashSet<>());
        
        return hmap.get(node);
    }

    public void dfs(Node node,HashSet<Node> seen){
        if(seen.contains(node)){
            return;
        }

        seen.add(node);

        if(!hmap.containsKey(node)){
            hmap.put(node,new Node(node.val));
        }

        for(Node nei:node.neighbors){
            if(!hmap.containsKey(nei)){
                hmap.put(nei,new Node(nei.val));
            }
            hmap.get(node).neighbors.add(hmap.get(nei));
        }

        for(Node nei:node.neighbors){
            dfs(nei,seen);
        }
    }
}
