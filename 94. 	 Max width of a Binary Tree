/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class State{
    int idx;
    TreeNode node;
    State(TreeNode node,int idx){
        this.node=node;
        this.idx = idx;
    }
}
class Solution {
    public int widthOfBinaryTree(TreeNode root) {
        int minIdx = 0;
        int maxIdx = 0;

        int maxWidth = 0;

        Queue<State> q = new LinkedList<>();
        q.add(new State(root,1));

        while(!q.isEmpty()){
            int n = q.size();

            for(int i=0;i<n;i++){
                State st = q.poll();
                TreeNode node = st.node;
                int idx = st.idx;

                if(i==0){
                    minIdx = idx;
                }

                if(i==n-1){
                    maxIdx = idx;
                }

                if(node.left!=null){
                    q.add(new State(node.left,idx*2));
                }
                if(node.right!=null){
                    q.add(new State(node.right,idx*2+1));
                }
            }

            maxWidth = Math.max(maxWidth,maxIdx-minIdx+1);

        }

        return maxWidth;
    }
}
