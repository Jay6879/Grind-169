class Solution {
    public int largestRectangleArea(int[] heights) {
        int[] nextSmaller = new int[heights.length];
        int[] prevSmaller = new int[heights.length];

        Stack<Integer> st = new Stack<>();

        for(int i=0;i<heights.length;i++){
            while(!st.isEmpty() && heights[st.peek()]>=heights[i]){
                st.pop();
            }
            if (st.isEmpty()){
                prevSmaller[i] = 0;
            } 
            else{
                prevSmaller[i] = st.peek() + 1;
            }
            st.push(i);
        }

        st.clear();

        for (int i = heights.length - 1; i >= 0; i--) {
            while (!st.isEmpty() && heights[st.peek()] >= heights[i]) {
                st.pop();
            }

            if (st.isEmpty()){
                nextSmaller[i] = heights.length - 1;
            }
            else{
                nextSmaller[i] = st.peek() - 1;
            }

            st.push(i);
        }

        int maxA = 0;
        for (int i = 0; i < heights.length; i++) {
            maxA = Math.max(maxA, heights[i] * (nextSmaller[i] - prevSmaller[i] + 1));
        }
        return maxA;
    }
}
