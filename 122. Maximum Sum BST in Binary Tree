class Solution {
    class NodeInfo {
        boolean isBST;
        int sum, min, max;
        
        NodeInfo(boolean isBST, int sum, int min, int max) {
            this.isBST = isBST;
            this.sum = sum;
            this.min = min;
            this.max = max;
        }
    }

    int maxSum = 0;

    public int maxSumBST(TreeNode root) {
        dfs(root);
        return maxSum;
    }

    private NodeInfo dfs(TreeNode root) {
        if (root == null) {
            return new NodeInfo(true, 0, Integer.MAX_VALUE, Integer.MIN_VALUE);
        }

        NodeInfo left = dfs(root.left);
        NodeInfo right = dfs(root.right);

        // Check if current subtree is a BST
        if (left.isBST && right.isBST && root.val > left.max && root.val < right.min) {
            int sum = left.sum + right.sum + root.val;
            maxSum = Math.max(maxSum, sum);
            return new NodeInfo(true, sum, Math.min(root.val, left.min), Math.max(root.val, right.max));
        }

        return new NodeInfo(false, 0, 0, 0);
    }
}
