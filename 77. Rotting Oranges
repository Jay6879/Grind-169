class State{
    int row;
    int col;
    State(int row,int col){
        this.row = row;
        this.col = col;
    }
}

class Solution {
    int[][] directions = new int[][]{{1,0},{0,1},{-1,0},{0,-1}};

    public int orangesRotting(int[][] grid) {
        Queue<State> q = new LinkedList<>();

        boolean[][] seen = new boolean[grid.length][grid[0].length];
        int freshOranges = 0;

        for(int i=0;i<grid.length;i++){
            for(int j=0;j<grid[0].length;j++){
                if(grid[i][j]==2){
                    q.add(new State(i,j));
                    seen[i][j] = true;
                }
                if(grid[i][j]==1){
                    freshOranges++;
                }
            }
        }

        if(freshOranges==0){
            return 0;
        }

        int min = -1;

        while(!q.isEmpty()){
            int n = q.size();

            for(int i=0;i<n;i++){
                State st = q.poll();
                int cr = st.row;
                int cc = st.col;

                for(int[] direction:directions){
                    int nr = cr+direction[0];
                    int nc = cc+direction[1];

                    if(isValid(nr,nc,grid) && !seen[nr][nc]){
                        q.add(new State(nr,nc));
                        freshOranges--;
                        seen[nr][nc] = true;
                    }
                }
            }

            min++;
        }

        if(freshOranges!=0){
            return -1;
        }

        return min;
    }

    public boolean isValid(int row,int col,int[][] grid){
        return row>=0 && row<grid.length && col>=0 && col<grid[0].length && grid[row][col]==1;
    }
}
