

class Solution
{
    //Function to find the maximum profit and the number of jobs done.
    int[] JobScheduling(Job arr[], int n)
    {
        // Your code here
        int[] num = new int[2];
        
        int profit = 0;
        int count = 0;
        
        PriorityQueue<Job> heap = new PriorityQueue<>((n1,n2)->n2.profit-n1.profit);
        
        for(int i=0;i<arr.length;i++){
            heap.add(arr[i]);
        }
        
        HashSet<Integer> hset = new HashSet<>();
        
        while(!heap.isEmpty()){
            Job j = heap.poll();
            if(!hset.contains(j.deadline)){
                hset.add(j.deadline);
                profit+=j.profit;
                count++;
            }
            else{
                for(int i=j.deadline;i>=1;i--){
                    if(!hset.contains(i)){
                        hset.add(i);
                        profit+=j.profit;
                        count++;
                        break;
                    }
                }
            }
        }
        
        num[0] = count;
        num[1] = profit;
        
        return num;
        
        
    }
}

/*
class Job {
    int id, profit, deadline;
    Job(int x, int y, int z){
        this.id = x;
        this.deadline = y;
        this.profit = z; 
    }
}
*/
