class Solution {
    // Function to detect cycle in a directed graph.
    public boolean isCyclic(ArrayList<ArrayList<Integer>> adj) {
        // code here
        int V = adj.size();
        
        int[] indegree = new int[V];
        
        for(int i=0;i<V;i++){
            
            for(int nei:adj.get(i)){
                indegree[nei]++;
            }
        }
        
        ArrayList<Integer> al = new ArrayList<>();
        
        Queue<Integer> q = new LinkedList<>();
        
        for(int i=0;i<V;i++){
            if(indegree[i]==0){
                q.add(i);
            }
        }
        
        while(!q.isEmpty()){
            
            int node = q.poll();
            al.add(node);
            
            for(int nei:adj.get(node)){
                indegree[nei]--;
                if(indegree[nei]==0){
                    q.add(nei);
                }
            }
        }
        
        return al.size()!=V;
    }
}
