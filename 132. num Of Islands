class Solution {
    int[][] directions = new int[][]{{1,0},{0,1},{-1,0},{0,-1}};
    public int numIslands(char[][] grid) {
        int numOfIslands = 0;
        
        for(int i=0;i<grid.length;i++){
            for(int j=0;j<grid[0].length;j++){
                if(grid[i][j]=='1'){
                    numOfIslands++;
                    dfs(i,j,grid);
                }
            }
        }

        return numOfIslands;


    }

    public void dfs(int row,int col,char[][] grid){

        grid[row][col] = '0';

        for(int[] direction:directions){
            int nr = row+direction[0];
            int nc = col+direction[1];

            if(isValid(nr,nc,grid) && grid[nr][nc]=='1'){
                dfs(nr,nc,grid);
            }
        }
    }

    public boolean isValid(int row,int col,char[][] grid){
        return row>=0 && row<grid.length && col>=0 && col<grid[0].length;
    }
}
