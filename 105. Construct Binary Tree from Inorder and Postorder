class Solution {
    HashMap<Integer,Integer> inMap;
    public TreeNode buildTree(int[] inorder, int[] postorder) {
        inMap = new HashMap<>();

        for(int i=0;i<inorder.length;i++){
            inMap.put(inorder[i],i);
        }

        return arrayToTree(inorder,0,inorder.length-1,postorder,0,postorder.length-1);
    }

    public TreeNode arrayToTree(int[] inorder,int inStart,int inEnd,int[] postorder,int postStart,int postEnd){
        if(inStart>inEnd || postStart>postEnd){
            return null;
        }

        TreeNode root = new TreeNode(postorder[postEnd]);

        int inPos = inMap.get(root.val);
        int numsLeft = inPos-inStart;

        root.left = arrayToTree(inorder,inStart,inPos-1,postorder,postStart,postStart+numsLeft-1);
        root.right = arrayToTree(inorder,inPos+1,inEnd,postorder,postStart+numsLeft,postEnd-1);

        return root;
    }
}
