class Solution {
    static List<Integer> maxCombinations(int N, int K, int A[], int B[]) {
        // code here
        List<Integer> ans = new ArrayList<>();
        
        Arrays.sort(A);
        Arrays.sort(B);
        
        PriorityQueue<Integer> pq = new PriorityQueue<>();
        
        for(int i=N-1;i>N-K-1;i--){
            for(int j = N-1;j>N-K-1;j--){
                int sum = A[i]+B[j];
                
                if(pq.size()<K){
                    pq.add(sum);
                }
                else if(sum>pq.peek()){
                    pq.poll();
                    pq.add(sum);
                }
                else{
                    break;
                }
            }
        }
        
        
        while(pq.size()>0 && K>0){
            ans.add(0,pq.poll());
        }
        
        return ans;
        
        
    }
}
