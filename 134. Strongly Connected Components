class Solution {
    // Function to find number of strongly connected components in the graph.
    public int kosaraju(ArrayList<ArrayList<Integer>> adj) {
        // code here
        
        int n = adj.size();
        
        boolean[] seen = new boolean[n];
        
        Stack<Integer> st = new Stack<>();
        
        for(int i=0;i<n;i++){
            if(!seen[i]){
                dfs(i,seen,st,adj);
            }
        }
        
        ArrayList<ArrayList<Integer>> transpose = new ArrayList<>();
        
        for(int i=0;i<n;i++){
            transpose.add(new ArrayList<>());
        }
        
        for(int i=0;i<n;i++){
            for(int nei:adj.get(i)){
                transpose.get(nei).add(i);
            }
        }
        
        Arrays.fill(seen,false);
        
        int scc = 0;
        while(!st.isEmpty()){
            int node = st.pop();
            if(!seen[node]){
                scc++;
                dfs1(node,seen,transpose);
            }
        }
        
        return scc;
        
        
    }
    
    public void dfs1(int node,boolean[] seen,ArrayList<ArrayList<Integer>> transpose){
        seen[node] = true;
        
        for(int nei:transpose.get(node)){
            if(!seen[nei]){
                dfs1(nei,seen,transpose);
            }
        }
    }
    
    public void dfs(int node,boolean[] seen,Stack<Integer> st,ArrayList<ArrayList<Integer>> adj){
        seen[node] = true;
        
        for(int nei:adj.get(node)){
            if(!seen[nei]){
                dfs(nei,seen,st,adj);
            }
        }
        
        st.push(node);
    }
}
