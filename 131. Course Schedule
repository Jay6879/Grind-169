class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        HashMap<Integer,List<Integer>> hmap = new HashMap<>();

        for(int i=0;i<numCourses;i++){
            hmap.put(i,new ArrayList<>());
        }

        for(int[] val:prerequisites){
            hmap.get(val[1]).add(val[0]);
        }

        int[] indegree = new int[numCourses];

        Queue<Integer> q = new LinkedList<>();

        for(int i=0;i<numCourses;i++){
            for(int nei:hmap.get(i)){
                indegree[nei]++;
            }
        }

        for(int i=0;i<numCourses;i++){
            if(indegree[i]==0){
                q.add(i);
            }
        }

        ArrayList<Integer> al = new ArrayList<>();

        while(!q.isEmpty()){
            int course = q.poll();
            al.add(course);

            for(int nei:hmap.get(course)){
                indegree[nei]--;
                if(indegree[nei]==0){
                    q.add(nei);
                }
            }
        }

        return al.size()==numCourses;
    }
}
