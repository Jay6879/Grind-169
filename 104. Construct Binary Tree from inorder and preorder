class Solution {
    HashMap<Integer,Integer> inMap;
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        inMap = new HashMap<>();

        for(int i=0;i<inorder.length;i++){
            inMap.put(inorder[i],i);
        }

        return arrayToTree(preorder,0,preorder.length-1,inorder,0,inorder.length-1);
    }

    public TreeNode arrayToTree(int[] preorder,int preStart,int preEnd,int[] inorder,int inStart,int inEnd){
        if(preStart>preEnd || inStart>inEnd){
            return null;
        }

        TreeNode root = new TreeNode(preorder[preStart]);

        int inPos = inMap.get(root.val);

        int numsLeft = inPos-inStart;

        root.left = arrayToTree(preorder,preStart+1,preStart+numsLeft,inorder,inStart,inPos-1);
        root.right = arrayToTree(preorder,preStart+numsLeft+1,preEnd,inorder,inPos+1,inEnd);

        return root;
    }
}
