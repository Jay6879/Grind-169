class Solution {
    public int search(int[] nums, int target) {
        int left = 0;
        int right = nums.length-1;
        int n = nums.length;

        if(nums[0]==target || nums[n-1]==target){
            return nums[0]==target?0:n-1;
        }

        if(nums[0]<nums[n-1]){
            return binarySearch(0,n-1,nums,target);
        }

        while(left<=right){
            int mid = left+(right-left)/2;
            if(nums[mid]==target){
                return mid;
            }
            else if(nums[mid]>nums[n-1]){
                left = mid+1;
            }
            else{
                right = mid-1;
            }
        }

        System.out.println(left);

        if(nums[left]==target){
            return left;
        }

        if(target<nums[n-1] && target>nums[left]){
            return binarySearch(left,n-1,nums,target);
        }

        return binarySearch(0,left,nums,target);
    }

    public int binarySearch(int left,int right,int[] nums,int target){

        while(left<=right){
            int mid = left+(right-left)/2;

            if(nums[mid]==target){
                return mid;
            }
            else if(nums[mid]>target){
                right = mid-1;
            }
            else{
                left = mid+1;
            }
        }

        return -1;
    }

}
