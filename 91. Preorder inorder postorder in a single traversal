import java.util.*;

class State {
    TreeNode node;
    int val; 
    
    State(TreeNode node, int val) {
        this.node = node;
        this.val = val;
    }
}

public class Solution {
    public static List<List<Integer>> getTreeTraversal(TreeNode root) {
        List<List<Integer>> result = new ArrayList<>();
        
        result.add(new ArrayList<>()); 
        result.add(new ArrayList<>()); 
        result.add(new ArrayList<>());

        if (root == null) return result; 
        
        Stack<State> stack = new Stack<>();
        stack.push(new State(root, 1)); 

        while (!stack.isEmpty()) {
            State currentState = stack.pop();
            TreeNode node = currentState.node;
            int val = currentState.val;

            if (val == 1) { 
                result.get(1).add(node.data);
                stack.push(new State(node, 2)); 
                
                if (node.left != null) {
                    stack.push(new State(node.left, 1)); 
                }
            } 
            else if (val == 2) { 
                result.get(0).add(node.data);
                stack.push(new State(node, 3)); 
                
                if (node.right != null) {
                    stack.push(new State(node.right, 1)); 
                }
            } 
            else { 
                result.get(2).add(node.data);
            }
        }

        return result;
    }
}
