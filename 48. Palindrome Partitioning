class Solution {
    public List<List<String>> partition(String s) {
        List<List<String>> ans = new ArrayList<>();

        backtrack(ans,new ArrayList<>(),0,s);

        return ans;
    }

    public void backtrack(List<List<String>> ans,List<String> al,int start,String s){
        if(start==s.length()){
            ans.add(new ArrayList<>(al));
            return;
        }

        for(int i = start;i<s.length();i++){
            if(isPalindrome(s.substring(start,i+1))){
                al.add(s.substring(start,i+1));
                backtrack(ans,al,i+1,s);
                al.remove(al.size()-1);
            }
        }
    }

    public boolean isPalindrome(String s){
        if(s.length()==0 || s.length()==1){
            return true;
        }

        int left = 0;
        int right = s.length()-1;


        while(left<=right){
            if(s.charAt(left)!=s.charAt(right)){
                return false;
            }

            left++;
            right--;
        }

        return true;
    }
}
